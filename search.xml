<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>hexo_blog_github.md</title>
      <link href="/2018/03/27/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/hexo-blog-github-md/"/>
      <url>/2018/03/27/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/hexo-blog-github-md/</url>
      <content type="html"><![CDATA[<h1 id="hexo博客备份到github上"><a href="#hexo博客备份到github上" class="headerlink" title="hexo博客备份到github上"></a><center>hexo博客备份到github上</center></h1><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><ul><li>之前在师兄那里学的建立hexo博客，主要有三个内容需要知道：1.本地仓库文件夹；2.github仓库管理；3.网页博客内容</li><li>因为自己有一个笔记本，回到寝室之后写了点白天的学习笔记，但是无法上传，导致我只能用U盘拷贝到本地仓库文件夹才能上传博客。之后就在想，如果实验室电脑上本地仓库文件夹丢失或者系统出现问题，导致本地仓库文件夹里的内容丢失，怎么办？那我以前的工作笔记博客岂不是全部丢失？</li><li>经过跟师兄交流，师兄给了我很大的帮助，跟我讲解了关于github上的知识，最重要的一点就是：可以把本地的母本文件，也就是本地仓库文件夹的内容上传到github中，这样换一个环境就可以直接利用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo http://github.com/username</span><br></pre></td></tr></table></figure></li></ul><p>拷贝到这个环境中，然后添加文件就可以直接上传到博客，并且文本不会丢失<br><br><br></p><h2 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h2><h3 id="主题思路："><a href="#主题思路：" class="headerlink" title="主题思路："></a>主题思路：</h3><ul><li>1.首先是需要建立自己的hexo博客（内容包含本地文件夹，github仓库，网页博客）</li><li>2.在github账号中，username.github.io仓库中建立另外一个新分支（branch）</li><li>3.把本地文件夹的内容按照一般的方法上传到hexo分支中，这样就可以把自己书写的笔记博客内容上传到github上，在云端中保存好文件（这里面有一个重要的坑，在所有文件中只能有blog文件夹中存在.git文件才行，因此，删除其他文件夹中所有的.git 文件，这样就可以把所有的文件上传上hexo分支仓库里）</li><li><p>4.打开另一个电脑或者另外一个环境（也可以建立一个文件夹），建立一个新文件夹，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo http://github.com/username</span><br></pre></td></tr></table></figure></li><li><p>5.这样就可以把内容下载到文件夹中，新建的文件夹中就是你的旧文件中所有文件。</p><ul><li>这里需要提前安装npm,hexo模块，Node.js需要自己查询网上下载，进行安装，然后安装hexo模块，安装代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure></li></ul></li><li><p>6.然后再就可以在新文件夹中/source/_posts新建.md文件(这里跟大家说一下，新建文件需要使用指令)，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;***.md&quot;</span><br></pre></td></tr></table></figure></li></ul><p>这里可以直接进行添加笔记，然后进行上传，主要有以下几点指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git add . #添加blog文件夹中所有文件暂存下来</span><br><span class="line">git commit -m &quot;explain&quot;</span><br><span class="line">git push -u commit hexo #把暂存的所有文件上传到github中</span><br><span class="line"></span><br><span class="line">hexo init #文件hexo初始化</span><br><span class="line">hexo g #hexo generate 生成网页文件</span><br><span class="line">hexo d #hexo deploy 建立在http://username.github.io博客网页上</span><br><span class="line">hexo s #hexo severes 运行在本地服务器上</span><br></pre></td></tr></table></figure></p><p>然后打开浏览器输入地址： localhost:4000（这里一般默认端口是4000）<br>这里的端口可以进行修改，当然如果不知道就去问问度娘，教程很多，自己摸索一下！</p><p>此时此刻，自己打开<a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> 试一试内容有没有上传上去，如果觉得写得不是很明确，请来信互相探讨！谢谢观阅本文！</p>]]></content>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python-数据结构</title>
      <link href="/2018/03/26/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2018/03/26/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="python中字典的循环遍历的两种方式"><a href="#python中字典的循环遍历的两种方式" class="headerlink" title="python中字典的循环遍历的两种方式"></a><center>python中字典的循环遍历的两种方式</center></h1><h2 id="python中字典的循环遍历的两种方式-1"><a href="#python中字典的循环遍历的两种方式-1" class="headerlink" title="python中字典的循环遍历的两种方式"></a>python中字典的循环遍历的两种方式</h2><ul><li><p>1.只对键的遍历</p><ul><li>一个简单的for语句就能循环字典的所有键，就像处理序列一样：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dictionary = &#123; <span class="string">"some_key"</span>: <span class="string">"some_value"</span> &#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dictionary:</span><br><span class="line">    print(<span class="string">"%s --&gt; %s"</span> %(key, dictionary[key]))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>2.对键和值都进行遍历</p><ul><li><p>如果只需要值，可以使用d.values，如果想获取所有的键则可以使用d.keys。</p></li><li><p>如果想获取键和值d.items方法会将键-值对作为元组返回，for循环的一大好处就是可以循环中使用序列解包。</p></li><li>代码实例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="keyword">print</span> (key, <span class="string">' value : '</span>, value)</span><br><span class="line"></span><br><span class="line">    结果如下：</span><br><span class="line">    name1 value : pythontab</span><br><span class="line">    name2 value : .</span><br><span class="line">    name3 value : com</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown</title>
      <link href="/2018/03/26/%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86hexo/Markdown/"/>
      <url>/2018/03/26/%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86hexo/Markdown/</url>
      <content type="html"><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a><center>Markdown</center></h1><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a><center>一级标题</center></h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><ul><li>我的第一行 </li></ul><ul><li>我的第二行<blockquote><p>我一直在使用引用 </p></blockquote></li></ul><blockquote><p>从现在开始</p></blockquote><p><a href="http://baidu.com" target="_blank" rel="noopener">Baidu</a></p><p><a href="http://image.so.com/v?q=%E7%BE%8E%E6%99%AF&amp;cmsid=7dc8b5dfb7db1ca53dec66ab145a4d64&amp;cmran=0&amp;cmras=0&amp;i=0&amp;cmg=f30ec52fc98b50534d6d334c97d557e8&amp;src=360pic_strong&amp;z=1#q=%E7%BE%8E%E6%99%AF&amp;i=0&amp;src=360pic_strong&amp;z=1&amp;lightboxindex=0&amp;id=d64c9b0b65e4dfb34e57fe1d2631c13f&amp;multiple=0&amp;itemindex=0&amp;dataindex=0&amp;prevsn=0&amp;currsn=0&amp;jdx=0&amp;fsn=60&amp;kn=50&amp;gn=0&amp;cn=0&amp;gsrc=1" target="_blank" rel="noopener">美景图片</a></p><p><em>你好</em> </p><p><strong>你好呀</strong></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><br>    <tr><br>        <td>第一组</td><br>        <td>一班</td><br>    </tr><br>    <tr><br>        <td>第二组</td><br>        <td>二班</td><br>    </tr><br></table><p>\</p><p>`</p><p>*</p><p>-</p><p>{你好}</p><p>[hello!]</p><p>(呀呀呀)</p><p>#</p><p>+-*/</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">contents = requests.get(<span class="string">'https://book.douban.com/latest?icn=index-latestbook-all'</span>).text</span><br><span class="line">pattern = re.compile(<span class="string">'&lt;li.*?detail-frame.*?href=.*?&gt;(.*?)&lt;/a&gt;.*?color-gray"&gt;(.*?)&lt;/p&gt;'</span>,re.S)</span><br><span class="line"></span><br><span class="line">resulta = re.findall(pattern,contents)</span><br><span class="line">print(resulta)</span><br><span class="line"><span class="keyword">for</span> resultas <span class="keyword">in</span> resulta:</span><br><span class="line">    name,year = resultas</span><br><span class="line">    year = re.sub(<span class="string">'\s'</span>,<span class="string">''</span>,year)</span><br><span class="line">    print(name,year)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo博客原文上传github</title>
      <link href="/2018/03/26/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0~%E7%AC%AC%E4%BA%8C%E7%AF%87/"/>
      <url>/2018/03/26/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0~%E7%AC%AC%E4%BA%8C%E7%AF%87/</url>
      <content type="html"><![CDATA[<h1 id="hexo博客原文上传github"><a href="#hexo博客原文上传github" class="headerlink" title="hexo博客原文上传github"></a><center>hexo博客原文上传github</center></h1><h2 id="HEXO常用命令"><a href="#HEXO常用命令" class="headerlink" title="HEXO常用命令"></a>HEXO常用命令</h2><ul><li>单条指令<ul><li>1.hexo new “postName” # 新建文章</li><li>2.hexo new page “pageName” # 新建页面</li><li>3.hexo clean # 清除之前 public 文件夹的内容</li><li>4.hexo generate # 生成静态页面至public目录</li><li>5.hexo deploy # 将.deploy目录部署到GitHub</li><li>6.hexo server # 开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</li><li>7.hexo help # 查看帮助</li><li>8.hexo version # 查看HEXO的版本</li></ul></li><li>简写指令<ul><li>1.hexo n == hexo new</li><li>2.hexo g == hexo generate</li><li>3.hexo d == hexo deploy</li><li>4.hexo s == hexo server</li><li>5.hexo v == hexo version</li></ul></li><li>复合指令<ul><li>1.hexo deploy -g #生成加部署</li><li>2.hexo server -g #生成加预览</li><li>3.hexo d –g 或者 hexo g –d #生成加部署</li></ul></li></ul><h2 id="配置ssh-key"><a href="#配置ssh-key" class="headerlink" title="配置ssh key"></a>配置ssh key</h2><ul><li><p>步骤如下：</p><ul><li><p>1.在任意文件夹下，右键git bash here,到.ssh文件夹下看看,清空所有文件，然后输入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ git config --global user.name &quot;yourname&quot;(双引号内为你的github名称)</span><br><span class="line">$ git config --global user.email &quot;youremail&quot;（双引号内为你的github邮箱）</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;youremail&quot;（同上）</span><br><span class="line">然后出现代码之后，三个回车键（Enter）就可以创建出公钥文件</span><br></pre></td></tr></table></figure></li><li><p>2.这时候直接在’C:\Users\cui.ssh’中将出现两个文件id_rsa和id_rsa.pub，id_rsa.pub是公钥，打开复制里面的内容（可以用记事本，这里给大家推荐一个好的文档编辑器Notepad++，超级好用）</p></li><li>3.在github中的yourname.github.io（你的hexo的github仓库）仓库下的setting下的deploy ssh下添加key,将上述内容复制即可</li><li><p>4.测试是否可以远程链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li><li><p>5.出现如下信息则正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="设置传输为SSH协议"><a href="#设置传输为SSH协议" class="headerlink" title="设置传输为SSH协议"></a>设置传输为SSH协议</h2><ul><li><p>1.这个主要是避免每次进行hexo deploy或者进行git push -u origin master命令时一直提示输入用户名和密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 进入存在.git文件的那个文件夹</span><br><span class="line">cd .deploy/</span><br></pre></td></tr></table></figure></li><li><p>2.查看当前的传输协议，如果是http（通常情况下都是HTTP格式），则更改，如果是ssh则不要后续的操作了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  https://github.com/username/REPOSITORY.git (fetch)</span><br><span class="line">origin  https://github.com/username/REPOSITORY.git (push)</span><br></pre></td></tr></table></figure></li><li><p>3.更改http为ssh,命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote set-url origin git@github.com:username/REPOSITORY2.git</span><br></pre></td></tr></table></figure></li><li><p>4.检查一下，是否进行了相应的更改</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line"># Verify new remote URL</span><br><span class="line"># origin  git@github.com:USERNAME/REPOSITORY2.git (fetch)</span><br><span class="line"># origin  git@github.com:USERNAME/REPOSITORY2.git (push)</span><br></pre></td></tr></table></figure><ul><li>至此，大功告成，此时进行hexo deploy或者进行git push -u origin master命令时就不需要输入密码了。</li></ul><h2 id="hexo博客发布文章出现相关问题？"><a href="#hexo博客发布文章出现相关问题？" class="headerlink" title="hexo博客发布文章出现相关问题？"></a>hexo博客发布文章出现相关问题？</h2><ul><li>1.问题如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">failed: _posts/***.md</span><br><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1:</span><br><span class="line"></span><br><span class="line">ateError (D:\Blog\node_modules\js-yaml\lib\js-yaml\loader.js:162:10)</span><br><span class="line">    at throwError (D:\Blog\node_modules\js-yaml\lib\js-yaml\loader.js:168:9)</span><br><span class="line">    at readBlockMapping (D:\Blog\node_modules\js-yaml\lib\js-yaml\loader.js:1045:9)</span><br><span class="line">   </span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">INFO  Generated: 2017/04/09/hello-world/index.html</span><br><span class="line">INFO  6 files generated in 504 ms</span><br><span class="line"></span><br><span class="line">Jhard@DESKTOP-VRQSHDK MINGW64 /d/Blog</span><br><span class="line">$ hexo d</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">warning: LF will be replaced by CRLF in 2017/04/09/hello-world/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line">Branch master set up to track remote branch master from https://github.com/Dream-bloom/Dream-bloom.github.io.git.</span><br><span class="line">Everything up-to-date</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure></li></ul><p>网上一般会给出三种修改方式：</p><ul><li>1.检查_config.yml内容，配置文件：_config.yml 中 # Site #URL 属性设置后面的：需要有空格再填写内容.看是不是这个原因</li><li>2.yaml 冒号后要加空格</li><li><p>3.hexo clean 然后再hexo g 最后发布下过一会儿看看 然后在你github博客仓库看看是否有对应的页面 如果有就是说仓库有 但是页面还是找不到 可能就需要hexo clean清除下本地的一些记录和静态文件 重新生成上传下.</p></li><li><p>总结如下：<br><br>首先,上面三种情况是需要进行核查的，否则你的好多文件都是无法上传的，这里给大家推荐一个在线检查yaml文件的链接<a href="http://www.yamllint.com/" target="_blank" rel="noopener">YAML Lint</a>,你可以直接把你的两个配置文件_config.yml（hexo文件下和themes文件下），如果都正确你就采取下面这一种方法：在/hexo/source/_posts下进行如下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;***.md&quot;</span><br></pre></td></tr></table></figure></li></ul><p>创建之后，用编辑器打开，把你想要上传的文件用传统的方法复制，然后进行粘贴.其他的头标签不要动，之后把你的文件删除，对新建的这个文件保存，然后执行下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>此时，就应该大功告成了，应该不会再次出现错误了！如果还有问题，可以点击左侧栏我的<a href="cuijunlei2016@gmail.com">邮箱</a>，咱们进行交流探讨！谢谢</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器的模拟--Header属性</title>
      <link href="/2018/03/26/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%88%A9%E7%94%A8%E6%A8%A1%E6%8B%9F%E6%B5%8F%E8%A7%88%E5%99%A8%E7%88%AC%E5%8F%96%E7%BD%91%E9%A1%B5/"/>
      <url>/2018/03/26/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%88%A9%E7%94%A8%E6%A8%A1%E6%8B%9F%E6%B5%8F%E8%A7%88%E5%99%A8%E7%88%AC%E5%8F%96%E7%BD%91%E9%A1%B5/</url>
      <content type="html"><![CDATA[<h1 id="浏览器的模拟–Header属性"><a href="#浏览器的模拟–Header属性" class="headerlink" title="浏览器的模拟–Header属性"></a><center>浏览器的模拟–Header属性</center></h1><p>有的时候，我们无法爬取一些网页，会出现403错误，因为这些网页为了防止被人恶意采集其信息所以进行了一些反爬虫的设置。<br>可以设置一些Header信息，模拟成浏览器去访问这些网站，解决这种问题。</p><p>爬取CSDN博客的内容为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">url = <span class="string">"http://blog.csdn.net/weiwei_pig/article/details/51178226"</span></span><br><span class="line">file = urllib.request.urlopen(url)</span><br></pre></td></tr></table></figure></p><p>此时会出现403异常，即禁止访问的错误，所以接下来我们需要让爬虫模拟成浏览器。模拟成浏览器可以设置User-Agent信息。通过我寻找到百度的User-agent直接使用：如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36</span><br></pre></td></tr></table></figure></p><h1 id="方法一：使用build-opener-修改报头"><a href="#方法一：使用build-opener-修改报头" class="headerlink" title="方法一：使用build_opener()修改报头"></a>方法一：使用build_opener()修改报头</h1><p>由于urlopen()不支持一些HTTP的高级功能，所以，我们要修改报头，可以使用urllib.request.build_opener()进行，模拟浏览器的代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">url = <span class="string">"http://blog.csdn.net/weiwei_pig/article/details/51178226"</span></span><br><span class="line">headers = (<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36"</span>)</span><br><span class="line">opener = urllib.request.build_opener()</span><br><span class="line">opener.addheaders = [headers]</span><br><span class="line"></span><br><span class="line">data = opener.open(url).read()</span><br></pre></td></tr></table></figure></p><p>爬取的内容可以写入文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fhandle = open(<span class="string">"e:/scrapy_data/3.html"</span>,<span class="string">"wb"</span>)</span><br><span class="line">fhandle.write(data)</span><br><span class="line">fhandle.close()</span><br></pre></td></tr></table></figure></p><h1 id="方法二：使用add-header-添加报头"><a href="#方法二：使用add-header-添加报头" class="headerlink" title="方法二：使用add_header()添加报头"></a>方法二：使用add_header()添加报头</h1><p>还可以利用urllib.request.Request()下的add_header()实现浏览器的模拟。代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">url = <span class="string">"http://blog.csdn.net/weiwei_pig/article/details/51178226"</span></span><br><span class="line">req = urllib.request.Request(url)</span><br><span class="line">req.add_header (<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36"</span>)</span><br><span class="line">data = urllib.request.urlopen(url).read()</span><br></pre></td></tr></table></figure></p><h1 id="代理服务器的设置"><a href="#代理服务器的设置" class="headerlink" title="代理服务器的设置"></a>代理服务器的设置</h1><p>网上整理好的网址(代理服务器)[<a href="http://yum.iqianyue.com/proxy" target="_blank" rel="noopener">http://yum.iqianyue.com/proxy</a>] 中找到很多代理服务器地址。打开网页之后，尽量找到验证时间比较短的。此时，我们可以选择第二个代理IP地址223.153.131.205，对应端口808，完整的格式为：“网址：端口号”，即223.153.131.205：808<br>用了代理IP地址之后，编写程序如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_proxy</span><span class="params">(proxy_addr,url)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> urllib.request</span><br><span class="line">    proxy = urllib.request.ProxyHandler(&#123;<span class="string">'http'</span>:proxy_addr&#125;)</span><br><span class="line">    opener = urllib.request.build_opener(proxy,urllib.request.HTTPHandler)</span><br><span class="line">    urllib.request.install_opener(opener)</span><br><span class="line">    data = urllib.request.urlopen(url).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">proxy_addr = <span class="string">"223.153.131.205：808"</span></span><br><span class="line">data = use_proxy(proxy_addr,<span class="string">"http://www.baidu.xom"</span>)</span><br><span class="line">print(len(data))</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python爬虫学习笔记(一)</title>
      <link href="/2018/03/26/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%EF%BC%9Aopen(%20)%E5%87%BD%E6%95%B0%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
      <url>/2018/03/26/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%EF%BC%9Aopen(%20)%E5%87%BD%E6%95%B0%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="python爬虫学习笔记-一-：open（）函数打开文件路径报错"><a href="#python爬虫学习笔记-一-：open（）函数打开文件路径报错" class="headerlink" title="python爬虫学习笔记(一)：open（）函数打开文件路径报错"></a><center>python爬虫学习笔记(一)：open（）函数打开文件路径报错<center></center></center></h1><h2 id="要以读文件的模式打开一个文件对象，使用Python内置的open-函数，传入文件名和标示符，标示符’r’表示读。"><a href="#要以读文件的模式打开一个文件对象，使用Python内置的open-函数，传入文件名和标示符，标示符’r’表示读。" class="headerlink" title="要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符，标示符’r’表示读。"></a>要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符，标示符’r’表示读。</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="string">'e:\scrapy_data\1.html'</span>,<span class="string">'wb'</span>)</span><br></pre></td></tr></table></figure><h2 id="对于初学python者，open（）函数很容易报错，并且不易被发现"><a href="#对于初学python者，open（）函数很容易报错，并且不易被发现" class="headerlink" title="对于初学python者，open（）函数很容易报错，并且不易被发现"></a>对于初学python者，open（）函数很容易报错，并且不易被发现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fhandle = open(<span class="string">"E:\scrapy_data\1.html"</span>,<span class="string">"wb"</span>)</span><br><span class="line">fhandle.write(data)</span><br><span class="line"></span><br><span class="line">OSError                                   Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-24</span>-cb34cdc3c531&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 fhandle = open("E:\scrapy_data\1.html","wb")</span><br><span class="line">      <span class="number">2</span> fhandle.write(data)</span><br><span class="line"></span><br><span class="line">OSError: [Errno <span class="number">22</span>] Invalid argument: <span class="string">'E:\\scrapy_data\x01.html'</span></span><br></pre></td></tr></table></figure><p>看着跟教程一模一样！只有斜杠的方向不一样，这里跟平常见得斜杠语法不一样，python语言里有一个转义字符的概念，需要在字符中使用特殊字符时，python用反斜杠’\’转义字符，所以错误案例中的’\’被用作转义，导致解释器解释文件路径错误。</p><ul><li>改正的方法有两种：<br>   第一、将’\’的方向反向为’/’，即文首正确的写法；<br>   第二、在含有转义符的字符串前加‘r’表示字符串内按原始含义解释，不做转义处理。（推荐！）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="string">r"e:\scrapy_data\1.html"</span>)</span><br></pre></td></tr></table></figure><h1 id="转义字符表"><a href="#转义字符表" class="headerlink" title="转义字符表"></a>转义字符表</h1><center><table><br>    <tr><br>        <td>转义字符</td><br>        <td>描述</td><br>    </tr><br>    <tr><br>        <td>(在行尾时)</td><br>        <td>续行符</td><br>    </tr><br>    <tr><br>        <td>\</td><br>        <td>反斜杠符号</td><br>    </tr><br>    <tr><br>        <td>\’</td><br>        <td>单引号</td><br>    </tr><br>    <tr><br>        <td>\”</td><br>        <td>双引号</td><br>    </tr><br>    <tr><br>        <td>\n</td><br>        <td>换行</td><br>    </tr><br>    <tr><br>        <td>\t</td><br>        <td>横向制表符</td><br>    </tr><br>    <tr><br>        <td>\v</td><br>        <td>纵向制表符</td><br>    </tr><br>    <tr><br>        <td>\r</td><br>        <td>回车</td><br>    </tr><br>    <tr><br>        <td>\f</td><br>        <td><br>换页</td><br>    </tr><br>    <tr><br>        <td>\oyy</td><br>        <td>八进制数，yy代表的字符，例如：\o12代表换行</td><br>    </tr><br></table><br></center><h1 id="open-函数标识符表"><a href="#open-函数标识符表" class="headerlink" title="open()函数标识符表"></a>open()函数标识符表</h1><ul><li>r 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</li><li>rb 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</li><li>r+ 打开一个文件用于读写。文件指针将会放在文件的开头。</li><li>rb+ 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</li><li>w 打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</li><li>wb 以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</li><li>w+ 打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</li><li>wb+ 以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</li><li>a 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</li><li>ab 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</li><li>a+ 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</li><li>ab+ 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</li></ul>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>github上传笔记</title>
      <link href="/2018/03/26/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/github%E4%B8%8A%E4%BC%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/03/26/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/github%E4%B8%8A%E4%BC%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="Github上传本地文档笔记"><a href="#Github上传本地文档笔记" class="headerlink" title="Github上传本地文档笔记"></a><center>Github上传本地文档笔记</center></h1><h2 id="分三步："><a href="#分三步：" class="headerlink" title="分三步："></a>分三步：</h2><ul><li>1.git add .(后面的点代表是要上传全部文件，如果上传一个文件，可以修改成文件名字)</li><li>2.git commit -m “说明上传的理由”</li><li>3.git push -u origin master(如果前面出现错误了，输入后者代码git pull –rebase origin master，然后再重新输入前面的代码)</li></ul><h1 id="ubuntu上安装shadowsocks的方法"><a href="#ubuntu上安装shadowsocks的方法" class="headerlink" title="ubuntu上安装shadowsocks的方法"></a><center>ubuntu上安装shadowsocks的方法</center></h1><ul><li>在ubuntu的终端上，输入下面代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure></li></ul><p>然后去软件管理器中调出shadowsocks,里面的设置进行输入即可</p><h2 id="心形python代码"><a href="#心形python代码" class="headerlink" title="心形python代码"></a>心形python代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">words = input(<span class="string">'Please input the words you want to say!:'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> words.split():</span><br><span class="line">    print(<span class="string">'\n'</span>.join([<span class="string">''</span>.join([(item[(x-y) % len(item)] <span class="keyword">if</span> ((x*<span class="number">0.05</span>)**<span class="number">2</span>+(y*<span class="number">0.1</span>)**<span class="number">2</span><span class="number">-1</span>)**<span class="number">3</span>-(x*<span class="number">0.05</span>)**<span class="number">2</span>*(y*<span class="number">0.1</span>)**<span class="number">3</span> &lt;= <span class="number">0</span> <span class="keyword">else</span> <span class="string">' '</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">-30</span>, <span class="number">30</span>)]) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">12</span>, <span class="number">-12</span>, <span class="number">-1</span>)]))</span><br><span class="line">    time.sleep(<span class="number">1.5</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识hexo博客</title>
      <link href="/2018/03/26/%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86hexo/hello-world/"/>
      <url>/2018/03/26/%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86hexo/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第二部分：requests模块学习</title>
      <link href="/2018/03/26/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/"/>
      <url>/2018/03/26/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</url>
      <content type="html"><![CDATA[<h1 id="requests模块的学习"><a href="#requests模块的学习" class="headerlink" title="requests模块的学习"></a>requests模块的学习</h1><h2 id="使用事前"><a href="#使用事前" class="headerlink" title="使用事前"></a>使用事前</h2><pre><code>-pip install requests</code></pre><h2 id="发送get-post请求，获取响应"><a href="#发送get-post请求，获取响应" class="headerlink" title="发送get,post请求，获取响应"></a>发送get,post请求，获取响应</h2><ul><li>response = requests.get(url) #发送get请求，请求url地址对应的响应</li><li>response = requests.post(url,data={请求体的字典}) #发送post请求</li></ul><h3 id="response-的方法"><a href="#response-的方法" class="headerlink" title="response 的方法"></a>response 的方法</h3><ul><li>response.text<ul><li>容易出现乱码，修改方式是前面加上response.encoding = ‘utf-8’</li></ul></li><li>response.content.decode()<ul><li>把响应的二进制字节流转化为str类型</li></ul></li><li>response.request.url  #发送请求的url地址</li><li>response.url  #response响应的url地址</li><li>response.request.headers  # 请求头</li><li>response.headers  #响应请求</li></ul><h3 id="获取网页源码的正确打开方式-通过下面三种方式一定可以获得相应的网页请求"><a href="#获取网页源码的正确打开方式-通过下面三种方式一定可以获得相应的网页请求" class="headerlink" title="获取网页源码的正确打开方式(通过下面三种方式一定可以获得相应的网页请求)"></a>获取网页源码的正确打开方式(通过下面三种方式一定可以获得相应的网页请求)</h3><ul><li>1.response.content.decode()</li><li>2.response.content.decode(‘gbk’)</li><li>3.response.text</li></ul><h2 id="发送带Header的请求-字典形式"><a href="#发送带Header的请求-字典形式" class="headerlink" title="发送带Header的请求(字典形式)"></a>发送带Header的请求(字典形式)</h2><ul><li>为了模拟浏览器，获取和浏览器一模一样的内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span> &#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url,headers = headers)</span><br></pre></td></tr></table></figure><h2 id="使用超时参数"><a href="#使用超时参数" class="headerlink" title="使用超时参数"></a>使用超时参数</h2><ul><li>response = requests.get(url,headers = headers,timeout=3)  #3秒内必须返回响应，否则会报错</li></ul><h3 id="retrying模块学习"><a href="#retrying模块学习" class="headerlink" title="retrying模块学习"></a>retrying模块学习</h3><ul><li>pip install retrying</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(stop_max_attempt_number = 3) #让被装饰的函数反复执行三次，三次全部报错才会报错，中间又一次正常，就可以正常进行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"this is func1"</span>)</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">"this is test error"</span>)</span><br></pre></td></tr></table></figure><h2 id="处理cookie相关的请求"><a href="#处理cookie相关的请求" class="headerlink" title="处理cookie相关的请求"></a>处理cookie相关的请求</h2><ul><li>人人网{“email”:”mr_mao_hacker@163.com”,<br>  “password”:”alarmchime”}</li><li><p>直接携带cookie请求url地址</p><ul><li><p>1.cookie放在headers中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;<span class="string">"User-Agent"</span>:<span class="string">"......"</span>,<span class="string">"Cookie"</span>:<span class="string">"cookie 字符串"</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.cookie字典传给cookies参数</p><ul><li>requests.get(url,cookie=cookie_dict)</li></ul></li></ul></li><li>先发送post请求，获取cookie，带上cookie请求登录后的页面<ul><li>1.session = requests.session() #session具有的方法和requests一样</li><li>2.session.post(url,data,headers) # 服务器设置在本地的cookie会保存在session</li><li>3.session.get(url) # 会带上之前保存在session中的cookie，能够请求成功</li></ul></li></ul><h1 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h1><ul><li>可以把字符串转化为字典形式  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cookie = <span class="string">"BIDUPSID=D7F0CDF633A0261AC63033983555E4B8; PSTM=1502592197; BAIDUID=688900B6A843179BB4682296FC040DCC:FG=1; BDUSS=B3azBtSjg4VjNHajZsc3h6R01mfmwyaTZ2Ty1HaWhWWS1Ba1lnRGNGZjhsTTlaSUFBQUFBJCQAAAAAAAAAAAEAAABReqJYt9bJ7cr1MjAxNgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPwHqFn8B6hZej; H_PS_PSSID=1439_21109_17001_22159; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; BD_CK_SAM=1; PSINO=2; BDRCVFR[feWj1Vr5u3D]=mk3SLVN4HKm; BD_UPN=14314654; WWW_ST=1521449610205"</span></span><br><span class="line">cookie_dict = &#123;i.split(<span class="string">"="</span>)[<span class="number">0</span>]:i.split(<span class="string">"="</span>)[<span class="number">-1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> cookie.split(<span class="string">"; "</span>)&#125;</span><br><span class="line">print(cookie_dict)</span><br><span class="line">response = requests.get(url,headers = headers,cookies=cookie_dict)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"renren2.html"</span>,<span class="string">"w"</span>,encoding = <span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content.decode())</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第一部分：爬虫概念，工具和HTTP</title>
      <link href="/2018/03/26/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/"/>
      <url>/2018/03/26/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</url>
      <content type="html"><![CDATA[<h1 id="爬虫概念，工具和HTTP"><a href="#爬虫概念，工具和HTTP" class="headerlink" title="爬虫概念，工具和HTTP"></a>爬虫概念，工具和HTTP</h1><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><h2 id="1-什么是爬虫"><a href="#1-什么是爬虫" class="headerlink" title="1.什么是爬虫"></a>1.什么是爬虫</h2><ul><li>爬虫就是’模拟客户端（浏览器）发送网络请求’，获取响应，按照规则提取数据的程序</li><li>‘模拟客户端（浏览器）发送网络请求’: 照着浏览器发送一模一样的请求获取和浏览器一模一样的数据</li></ul><h2 id="2-爬虫的数据去哪了"><a href="#2-爬虫的数据去哪了" class="headerlink" title="2.爬虫的数据去哪了"></a>2.爬虫的数据去哪了</h2><ul><li>呈现出来：展现在网页上，或者是展现在app上</li><li>进行分析：从数据中寻找一些规律</li></ul><h2 id="3-需要的软件和环境"><a href="#3-需要的软件和环境" class="headerlink" title="3.需要的软件和环境"></a>3.需要的软件和环境</h2><ul><li>python3 </li><li>基础语法（字符串，列表，字典，判断和循环）</li><li>函数（函数的创建和调用）</li><li>面向对象（如何创建一个类，如何使用这个类）</li><li>工具IDE ：pycharm<ul><li>pycharm编辑器</li></ul></li><li>chrome浏览器<ul><li>分析网络请求用的</li></ul></li></ul><h2 id="4-浏览器的请求"><a href="#4-浏览器的请求" class="headerlink" title="4.浏览器的请求"></a>4.浏览器的请求</h2><ul><li><p>url</p><ul><li>在chrome中点击检查，点到network，</li><li>url = 请求的协议 + 网站的域名 + 资源的路径 + 参数</li></ul></li><li><p>浏览器请求url地址</p><ul><li>当前url对应的响应 + js + css + 图片 —&gt;&gt;elements中的内容</li></ul></li><li>爬虫请求url地址<ul><li>当前url对应的响应</li></ul></li><li><p>elements的内容和爬虫获取到的url地址的响应不同，爬虫中需要以当前url地址对应的响应为准提取数据</p></li><li><p>当前url地址对应的响应在哪里</p><ul><li>从network中找到当前的url地址，点击reponse</li><li>在页面上右键显示页面源码</li></ul></li></ul><h2 id="5-认识HTTP、HTTPS"><a href="#5-认识HTTP、HTTPS" class="headerlink" title="5.认识HTTP、HTTPS"></a>5.认识HTTP、HTTPS</h2><ul><li>HTTP：超文本传输协议<ul><li>以明文的形式传输</li><li>效率更高，不安全</li></ul></li><li><p>HTTPS:HTTP + SSL（安全套接字层）</p><ul><li>传输之前数据先加密，之后解密获取内容</li><li>效率较低，安全</li></ul></li><li><p>get请求和post请求的区别</p><ul><li>get请求没有请求体，post有，get请求把数据放到url地址中</li><li>post请求常用于登录注册，</li><li>post请求携带的数据量比get请求大，多，常用于传输大文本的时候</li></ul></li><li><p>HTTP协议请求</p><ul><li>1.请求行</li><li>2.请求头<ul><li>User-Agent:用户代理：对方服务器能够通过user-agent知道当前请求对方资源的是什么浏览器</li><li>如果我们需要模拟手机版的浏览器发送请求，就需要把user-agent改成手机版的</li><li>Cookie：用来存储用户信息的，每次请求会被携带上发送给对方的浏览器<ul><li>要获取登录后才能访问的页面</li><li>对方的服务器会通过cookie来判断我们是一个爬虫</li></ul></li></ul></li><li>3.请求体<ul><li>携带数据的</li><li>get请求没有请求体</li><li>post请求有请求体</li></ul></li></ul></li><li>HTTP协议之响应<ul><li>1.响应头<ul><li>Set-Cookie：对方服务器通过该字段设置cookie到本地</li></ul></li><li>2.响应体<ul><li>url地址对应的响应</li></ul></li></ul></li></ul></div></div>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第三部分：数据提取方法</title>
      <link href="/2018/03/21/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/"/>
      <url>/2018/03/21/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/</url>
      <content type="html"><![CDATA[<h1 id="数据提取方法"><a href="#数据提取方法" class="headerlink" title="数据提取方法"></a><center>数据提取方法</center></h1><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><ul><li>数据交换格式，看起来像python类型（列表，字典）的字符串</li><li><p>使用json之前需要导入json模块</p></li><li><p>哪里会返回json的数据</p><ul><li>1.浏览器切换成手机版</li><li>2.抓包</li></ul></li></ul><ul><li><p>json.loads</p><ul><li>把json字符串转化为python类型</li><li><code>json.loads(json字符串)</code></li></ul></li><li><p>json.dumps</p><ul><li>把python类型转化为json字符串</li><li><code>json.dumps({&quot;a&quot;:&quot;1&quot;,&quot;b&quot;:&quot;2&quot;})</code></li><li>json.dumps(ret1,ensure_ascii=False,indent=2)<ul><li>ensure_ascii :让中文显示成中文</li><li>indent : 能够让下一行在上一行的基础上空格</li></ul></li></ul></li></ul><ul><li>豆瓣电视爬虫案例</li></ul><h3 id="xpath和lxml"><a href="#xpath和lxml" class="headerlink" title="xpath和lxml"></a>xpath和lxml</h3><ul><li>xpath<ul><li>一门从html中提取数据的语言</li></ul></li><li><p>xpath语法</p><ul><li>xpath helper插件：帮助我们从<code>elements</code>中定位数据</li><li>1.选择节点（标签）<ul><li><code>/html/head/meta</code> ：能够选中html下的head下的所有的meta标签</li></ul></li><li>2.<code>//</code>： 能够从任意节点开始选择<ul><li><code>//li</code> ：当前页面上的所有的li标签</li><li><code>/html/head//link</code>:head标签中所有的link标签</li></ul></li><li>3.<code>@符号的用途</code><ul><li>选择具体某个元素：<code>//div[@class=&#39;feed-infinite-wrapper&#39;]/ul/li</code><ul><li>选择class=’feed-infinite-wrapper’的div下的ul下的li</li></ul></li><li><code>a/@href</code> :选择a的href的值</li></ul></li><li>4.获取文本:<ul><li><code>/a/text()</code> :获取a标签下的文本 </li><li><code>/a//text()</code> :获取a标签下所有的文本 </li></ul></li><li><ol><li>点前<ul><li>“./a” 当前节点下的a标签</li></ul></li></ol></li></ul></li><li><p>lxml</p><ul><li>安装：pip install lxml<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">element = etree.HTML(<span class="string">"html字符串"</span>)</span><br><span class="line">element.xpath(<span class="string">""</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="基础知识点的学习"><a href="#基础知识点的学习" class="headerlink" title="基础知识点的学习"></a>基础知识点的学习</h3><ul><li><p>format:字符串格式化的一种方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"&#123;&#125;年级"</span>.format(<span class="number">1</span>)</span><br><span class="line"><span class="string">"&#123;&#125;年级&#123;&#125;班"</span>.format([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>&#125;)</span><br><span class="line"><span class="string">"&#123;&#125;年级"</span>.format(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>列表推导式</p><ul><li><p>帮助我们快速的生成包含一堆数据的列表</p><p><code>[i+10 for i in range(10)]</code>—&gt;[10,11,12,13,…,19];<br><code>[&quot;10月{}日&quot;.format(i) for i in range(1,10)]</code>—&gt;[“10月1日”，…,”10月9日”]</p></li></ul></li><li><p>字典推导式</p><ul><li>帮助我们快速的生成包含一堆数据的字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;i+<span class="number">10</span>:i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</span><br><span class="line"><span class="comment"># &#123;10:0,11:1,12:2...19:9&#125;</span></span><br><span class="line">&#123;<span class="string">"a&#123;&#125;"</span>.format(i):<span class="number">10</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)&#125;</span><br><span class="line"><span class="comment"># &#123;"a0":10,"a1":10,"a2":10&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>三元运算符</p><ul><li>if 后面的条件成立，就把if前面的结果赋值给a,否则把else后面的结果赋值给a<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> <span class="keyword">if</span> <span class="number">4</span>&gt;<span class="number">3</span> <span class="keyword">else</span> <span class="number">20</span> <span class="comment">#a = 10</span></span><br><span class="line">a = <span class="number">10</span> <span class="keyword">if</span> <span class="number">4</span>&lt;<span class="number">3</span> <span class="keyword">else</span> <span class="number">20</span> <span class="comment">#a = 20</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="写爬虫的讨论"><a href="#写爬虫的讨论" class="headerlink" title="写爬虫的讨论"></a>写爬虫的讨论</h2><ul><li><p>1.url</p><ul><li>知道url地址的规律和总的页码数：构造url地址的列表</li><li>start_url</li></ul></li><li><p>2.发送请求，获得响应</p><ul><li>requests</li></ul></li><li><p>3.提取数据</p><ul><li>返回json字符串：json模块</li><li>返回的是html字符串：lxml模块配合xpath提取数据</li></ul></li><li><p>4.保存数据</p></li></ul>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
